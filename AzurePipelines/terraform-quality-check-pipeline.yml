trigger: none
  # branches:
  #   include:
  #     - master
  #     - main
  #   exclude:
  #     - feature/*
  # tags:
  #   exclude:
  #     - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: terraformVersion
  value: 0.14.4

stages:
- stage: QualityCheckStage
  displayName: Quality Check Stage
  jobs:
    - job: CheckovJob
      displayName: Run Checkov Scan
      steps:
      # Checkov is a static code analysis tool for infrastructure-as-code.
      # It scans cloud infrastructure provisioned using Terraform, Cloudformation, Kubernetes, Serverless 
      # or ARM Templates and detects security and compliance misconfigurations.
      # Documentation: https://github.com/bridgecrewio/checkov
      # NOTE: If you want to skip a specific check from the analysis, include it in the command-line as 
      # follows: --skip-check CKV_AWS_70,CKV_AWS_52,CKV_AWS_21,CKV_AWS_18,CKV_AWS_19
      - script: |
          mkdir CheckovReport
          docker pull bridgecrew/checkov
          docker run -v $(System.DefaultWorkingDirectory)/Networking:/tf bridgecrew/checkov --directory /tf
          docker run -v $(System.DefaultWorkingDirectory)/Networking:/tf bridgecrew/checkov --directory /tf --output junitxml > $(System.DefaultWorkingDirectory)/CheckovReport/Checkov-Report.xml
        displayName: 'Checkov Static Code Analysis'
        name: CheckovScan
        condition: always()
      
      # The following SED command is used to remove the footer line in a file. 
      # The $ indicates the last line of a file.
      # The SED command prints the contents of the file on the unix or linux terminal by removing the lines. 
      # However the SED command does not remove the lines from the source file. 
      # To Remove the lines from the source file itself, use the -i option with SED command.
      # - script: |
      #     sed -i '$d' $(System.DefaultWorkingDirectory)/CheckovReport/Checkov-Report.xml
      #     sed -i '$d' $(System.DefaultWorkingDirectory)/CheckovReport/Checkov-Report.xml
      #   displayName: 'Removing the last 2 lines from the Checkov Report'
      #   name: CheckovReportCleanup
      #   condition: always()
      
      # Publish the Checkov report as an artifact to Azure Pipelines
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: Checkov Report'
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/CheckovReport'
          ArtifactName: CheckovReport

      # Publish the results of the Checkov analysis as Test Results to the pipeline
      # NOTE: There is a current issue with the produced XML that fails to publish the test results correctly.
      # Discussed issue with BridgeCrew, which is looking into it.
      # Work-around is to include the Script step to remove the last 2 lines from the file before processing.
      - task: PublishTestResults@2
        displayName: Publish Checkov Test Results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/*Checkov-Report.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/CheckovReport'
          mergeTestResults: false
          testRunTitle: Checkov Scan
          failTaskOnFailedTests: false
          publishRunAttachments: true

      # Clean up any of the containers / images that were used for quality checks
      - bash: |
          docker rmi "bridgecrew/checkov" -f | true
        displayName: 'Remove Checkov Docker Image'
        condition: always()

    - job: TFSecJob
      displayName: Run TFSec Scan
      dependsOn: CheckovJob
      condition: succeededOrFailed()
      steps:
      # TFSec uses static analysis of Terraform templates to spot potential security issues, and 
      # checks for violations of AWS, Azure and GCP security best practice recommendations.
      # NOTE: To disable a specific check from analysis, include it in the command-line as 
      # follows: -e GEN001,GCP001,GCP002
      # Documentation: https://github.com/tfsec/tfsec
      - bash: |
          mkdir TFSecReport
          docker pull liamg/tfsec:latest
          docker run --rm -t -v $(System.DefaultWorkingDirectory)/Networking:/src liamg/tfsec ./src
          docker run --rm -t -v $(System.DefaultWorkingDirectory)/Networking:/src liamg/tfsec ./src --format JUnit > $(System.DefaultWorkingDirectory)/TFSecReport/TFSec-Report.xml
        displayName: TFSec Static Code Analysis
        name: TFSecScan
        condition: always()

      # Publish the TFSec report as an artifact to Azure Pipelines
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: TFSec Report'
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/TFSecReport'
          ArtifactName: TFSecReport

      # Publish the results of the TFSec analysis as Test Results to the pipeline
      - task: PublishTestResults@2
        displayName: Publish TFSecReport Test Results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/*TFSec-Report.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/TFSecReport'
          testRunTitle: TFSec Scan
          mergeTestResults: false
          failTaskOnFailedTests: false
          publishRunAttachments: true

      # Clean up any of the containers / images that were used for quality checks
      - bash: |
          docker rmi "liamg/tfsec:latest" -f | true
        displayName: 'Remove TFSec Docker Image'
        condition: always()

    - job: GHLintJob
      displayName: Run GitHub Super-Linter Scan
      dependsOn: TFSecJob
      condition: succeededOrFailed()
      steps:
      # The GitHub Super-Linter runs a combination of various linters, written in bash, 
      # to help validate your source code.
      # In particular, this will execute TFLint, and TerraScan against Terraform files.
      # Documentation: https://github.com/github/super-linter
      # IMPORTANT: We are executing the GitHub Linter twice, because, if the last command in the script is 
      # successful (ie. copying file via 'docker cp'), then the whole script passes, as in, it will not
      # flag the task as 'failed' even though there were errors found when linting! 
      # This bloats the execution time though; as a work-around, we can set the 'failTaskOnFailedTests' field
      # in the PublishTestResults task to 'true' which will catch the failed tests, and fail the pipeline.
      # Personally, I like the failure to be apparent to the respective scan, versus when publishing.
      - script: |
          mkdir super-linter.report
          docker pull github/super-linter:latest
          docker run -e RUN_LOCAL=true -e OUTPUT_DETAILS=detailed -e OUTPUT_FORMAT=tap -v $(System.DefaultWorkingDirectory)/Networking:/tmp/lint --name outputDir github/super-linter:latest
          docker cp outputDir:/tmp/lint/super-linter.report $(System.DefaultWorkingDirectory)/GHLinterReport
          docker run -e RUN_LOCAL=true -v $(System.DefaultWorkingDirectory)/Networking:/tmp/lint github/super-linter:latest
        displayName: 'GitHub Super-Linter Code Scan'
        name: GHLintScan
        condition: always()

      # Publish the GitHub Linter reports as an artifact to Azure Pipelines
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: GH Linter Report'
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/GHLinterReport'
          ArtifactName: GHLinterReport

      # This script converts the GitHub Linter report (from TAP format), to a format that is 
      # supported for consumption in Azure Pipelines (ie. JUnit).
      # Referenced documentation: https://r2devops.io/jobs/static_tests/super_linter
        # The SED commands do the following (in order):
          # Extract message to improve report display, add real newlines (ie. from the \n), and 
          # removes double </failure> that break the syntax in some reports
      - script: |
          sudo npm install -g tap-junit
          mkdir GHLinterReport/Converted
          cd GHLinterReport

          tap-junit --pretty --suite TFLint --input super-linter-TERRAFORM.tap --output $(System.DefaultWorkingDirectory)/Converted --name TFLint-Report.xml
          sed -i 's/<failure message="\(.\+\)" type="fail">.*/<failure message="" type="fail">\n\1\n<\/failure>/g' $(System.DefaultWorkingDirectory)/Converted/TFLint-Report.xml
          sed -i 's/\\n/\n/g' $(System.DefaultWorkingDirectory)/Converted/TFLint-Report.xml
          sed -i ':begin;$!N;s/<\/failure>\n<\/failure>/<\/failure>/;tbegin;P;D' $(System.DefaultWorkingDirectory)/Converted/TFLint-Report.xml

          tap-junit --pretty --suite TerraScan --input super-linter-TERRAFORM_TERRASCAN.tap --output $(System.DefaultWorkingDirectory)/Converted --name TerraScan-Report.xml
          sed -i 's/<failure message="\(.\+\)" type="fail">.*/<failure message="" type="fail">\n\1\n<\/failure>/g' $(System.DefaultWorkingDirectory)/Converted/TerraScan-Report.xml
          sed -i 's/\\n/\n/g' $(System.DefaultWorkingDirectory)/Converted/TerraScan-Report.xml
          sed -i ':begin;$!N;s/<\/failure>\n<\/failure>/<\/failure>/;tbegin;P;D' $(System.DefaultWorkingDirectory)/Converted/TerraScan-Report.xml
        displayName: 'Convert GitHub Linter Report to JUnit'
        name: GHReportConvert
        condition: always()

      # Publish the Converted GitHub Linter reports as an artifact to Azure Pipelines
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: Coverted GH Linter Report'
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/Converted'
          ArtifactName: GHLinterReport-Converted
      
      # Publish the results of the GitHub Super-Linter analysis as Test Results to the pipeline
      - task: PublishTestResults@2
        displayName: Publish TFLint Lint Results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/*TFLint-Report.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/Converted'
          testRunTitle: GitHub Linter - TFLint
          mergeTestResults: false
          failTaskOnFailedTests: false # Change to TRUE if the GitHub Linter is only run once (see notes)
          publishRunAttachments: true
      
      # Publish the results of the GitHub Super-Linter analysis as Test Results to the pipeline
      - task: PublishTestResults@2
        displayName: Publish TerraScan Lint Results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/*TerraScan-Report.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/Converted'
          testRunTitle: GitHub Linter - TerraScan
          mergeTestResults: false
          failTaskOnFailedTests: false # Change to TRUE if the GitHub Linter is only run once (see notes)
          publishRunAttachments: true

      # Clean up any of the containers / images that were used for quality checks
      - bash: |
          docker rmi "github/super-linter:latest" -f | true
        displayName: 'Remove GitHub Super-Linter Docker Image'
        condition: always()
    
    - job: TFComplianceJob
      displayName: Run Terraform-Compliance Scan
      dependsOn: GHLintJob
      condition: succeededOrFailed()
      steps:
      # First, we need to install Terraform
      - task: TerraformInstaller@0
        displayName: Installing Terraform v$(terraformVersion)
        inputs:
          terraformVersion: $(terraformVersion)
      
      # Next, we need to run Terraform INIT
      - task: TerraformTaskV1@0
        displayName: Run Terraform INIT
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/Networking/Deployments/Network-Deployment/Hub-Deploy'
          commandOptions: '-var-file="Hub.tfvars"'
          backendServiceArm: 'Visual Studio Enterprise(c28db86b-8ce1-4755-aa09-fc99f6e0a667)'
          backendAzureRmResourceGroupName: 'TerraformStateRG'
          backendAzureRmStorageAccountName: 'terraformstatesaae'
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: 'terracompli.tfstate'

      # Then we need to run Terraform PLAN (because Terraform-Compliance needs a .plan file)
      - task: TerraformTaskV1@0
        displayName: Run Terraform PLAN
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/Networking/Deployments/Network-Deployment/Hub-Deploy'
          commandOptions: '-var-file=Hub.tfvars -out=plan.out'
          environmentServiceNameAzureRM: 'Visual Studio Enterprise(1)(c28db86b-8ce1-4755-aa09-fc99f6e0a667)'

      # Running Terraform-Compliance
      # NOTE: Will have to run scan twice, once to receive the output (which does not show in terminal), and
      # a second time for terminal display
      - script: |
          mkdir TerraformCompliance
          docker pull eerkunt/terraform-compliance
          # docker run --rm --volume $(System.DefaultWorkingDirectory)/Networking/Deployments/Network-Deployment/Hub-Deploy:/target -i eerkunt/terraform-compliance --features git:https://github.com/terraform-compliance/user-friendly-features.git --planfile plan.out > $(System.DefaultWorkingDirectory)/TerraformCompliance/TFCompliance-Report.xml
          docker run --rm --volume $(System.DefaultWorkingDirectory)/Networking/Deployments/Network-Deployment/Hub-Deploy:/target -i eerkunt/terraform-compliance --features git:https://github.com/terraform-compliance/user-friendly-features.git --planfile plan.out
        displayName: 'Terraform Compliance Check'
        name: TerraformCompliance
        condition: always()

      # NOTE: This does not work yet, as the output is not formatted correctly
      # Contacted Terraform-Compliance originator (Emre Erkunt) concerning outputs and formatting
      # - task: PublishTestResults@2
      #   displayName: Publish TerraformCompliance Test Results
      #   condition: succeededOrFailed()
      #   inputs:
      #     testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
      #     testResultsFiles: '**/*TFCompliance-Report.xml'
      #     searchFolder: '$(System.DefaultWorkingDirectory)/TerraformCompliance'
      #     mergeTestResults: false
      #     testRunTitle: TerraformCompliance Scan
      #     failTaskOnFailedTests: false
      #     publishRunAttachments: true

      # NOTE: Nothing to publish until outputs can be received
      # - task: PublishBuildArtifacts@1
      #   displayName: 'Publish Artifact: TerraformCompliance Report'
      #   condition: succeededOrFailed()
      #   inputs:
      #     PathtoPublish: '$(System.DefaultWorkingDirectory)/TerraformCompliance'
      #     ArtifactName: TerraformComplianceReport

      # Clean up any of the containers / images that were used for quality checks
      - bash: |
          docker rmi "eerkunt/terraform-compliance" -f | true
        displayName: 'Remove Terraform-Compliance Docker Image'
        condition: always()