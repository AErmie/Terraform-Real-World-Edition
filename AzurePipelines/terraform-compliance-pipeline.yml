trigger: none
  # branches:
  #   include:
  #     - master
  #     - main
  #   exclude:
  #     - feature/*
  # tags:
  #   exclude:
  #     - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: terraformVersion
  value: 0.14.4

stages:
- stage: QualityCheckStage
  displayName: Quality Check Stage
  jobs:
    - job: QualityTestJob
      displayName: Run Terraform-Compliance
      steps:
      # First, we need to install Terraform
      - task: TerraformInstaller@0
        displayName: Installing Terraform v$(terraformVersion)
        inputs:
          terraformVersion: $(terraformVersion)
      
      # Next, we need to run Terraform INIT
      - task: TerraformTaskV1@0
        displayName: Run Terraform INIT
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/Networking/Deployments/Network-Deployment/Hub-Deploy'
          commandOptions: '-var-file="Hub.tfvars"'
          backendServiceArm: 'Visual Studio Enterprise(c28db86b-8ce1-4755-aa09-fc99f6e0a667)'
          backendAzureRmResourceGroupName: 'TerraformStateRG'
          backendAzureRmStorageAccountName: 'terraformstatesaae'
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: 'terracompli.tfstate'

      # Then we need to run Terraform PLAN (because Terraform-Compliance needs a .plan file)
      - task: TerraformTaskV1@0
        displayName: Run Terraform PLAN
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/Networking/Deployments/Network-Deployment/Hub-Deploy'
          commandOptions: '-var-file=Hub.tfvars -out=plan.out'
          environmentServiceNameAzureRM: 'Visual Studio Enterprise(1)(c28db86b-8ce1-4755-aa09-fc99f6e0a667)'

      - script: |
          mkdir TerraformCompliance
          docker pull eerkunt/terraform-compliance
          docker run --rm --volume $(System.DefaultWorkingDirectory)/Networking/Deployments/Network-Deployment/Hub-Deploy:/target -i eerkunt/terraform-compliance --features git:https://github.com/terraform-compliance/user-friendly-features.git --planfile plan.out > $(System.DefaultWorkingDirectory)/TerraformCompliance/TFCompliance-Report.xml
        displayName: 'Terraform Compliance Check'
        name: TerraformCompliance
        condition: always()

      - task: PublishTestResults@2
        displayName: Publish TerraformCompliance Test Results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/*TFCompliance-Report.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/TerraformCompliance'
          mergeTestResults: false
          testRunTitle: TerraformCompliance Scan
          failTaskOnFailedTests: false
          publishRunAttachments: true


      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: TerraformCompliance Report'
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/TerraformCompliance'
          ArtifactName: TerraformComplianceReport

      # Clean up any of the containers / images that were used for quality checks
      - bash: |
          docker rmi "eerkunt/terraform-compliance" -f | true
        displayName: 'Remove Terraform Quality Check Docker Images'
        condition: always()